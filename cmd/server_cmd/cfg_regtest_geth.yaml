# Example configuration file for the bridge server

# ETH
ETH_RPC_URL: "http://localhost:8545" # http://" + SERVER + ":" + PORT
ETH_CORE_ACCOUNT_PRIV: "dbcec79f3490a6d5d162ca2064661b85c40c93672968bfbd906b952e38c3e8de" # address: 0x85b427C84731bC077BA5A365771D2b64c5250Ac8
ETH_RETRO_SCAN_BLK: 13370 # -1: honor statedb last scanned blk, >0 Synchronizer shall start from this block number.

# DB
DB_FILE_PATH: "local_test_bridge.db" # Use full path or just the file name to imply current path.

# BTC
BTC_RPC_SERVER: "127.0.0.1"
BTC_RPC_PORT: "19001"
BTC_RPC_USERNAME: "admin1"
BTC_RPC_PWD: "123"
BTC_START_BLK: -1
BTC_CHAIN_CONFIG: "regtest" # mainnet, testnet
BTC_CORE_ACCOUNT_PRIV: "cUWcwxzt2LiTxQCkQ8FKw67gd2NuuZ182LpX9uazB93JLZmwakBP" # bridge's private key
BTC_CORE_ACCOUNT_ADDR: "mvqq54khZQta7zDqFGoyN7BVK7Li4Xwnih" # bridge's address (can receive deposit BTCs)

# Schnorr Signer
# Both Local Signer and Remote Signer are supported.
# Local signer: Use the local BTC_CORE_ACCOUNT to initiate a single-key signer.
# Remote signer: Use the cert you provied to connect to the remote signer.
USE_REMOTE_SIGNER: true # If false, then a local signer is created and used upon start.
REMOTE_SIGNER_USER_ID: 0
REMOTE_SIGNER_NAME: "client0"
REMOTE_SIGNER_CERT: "client0.crt"
REMOTE_SIGNER_KEY: "client0.key"
REMOTE_SIGNER_CA_CERT: "client0-ca.crt"
REMOTE_SIGNER_SERVER: "52.184.81.32:6001" # ip+port
REMOTE_SIGNER_SERVER_CA_CERT: "node0-ca.crt"

# HTTP
HTTP_IP: "127.0.0.1" # server listens on ...
HTTP_PORT: "8080"

# Extra
# If you use pre-deployed bridge and twBTC, you set these two addresses.
# Otherwise (if strings are empty), the server will deploy new bridge and twBTC upon start.
PREDEFINED_BRIDGE_ADDRESS: "0xc5294C7F72114Ae9BE38E067b7b379837b5D0172"
PREDEFINED_TWBTC_ADDRESS: "0xFce9B51e90ff060bF4A226af39B1983f9a88CD18"
