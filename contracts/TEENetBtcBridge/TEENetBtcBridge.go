// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package TEENetBtcBridge

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// TEENetBtcBridgeMetaData contains all meta data concerning the TEENetBtcBridge contract.
var TEENetBtcBridgeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pk_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"btcTxId\",\"type\":\"bytes32\"}],\"name\":\"AlreadyMinted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"AlreadyPrepared\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyOutpointIdxs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyOutpointTxIds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"InvalidSchnorrSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutpointTxIdsAndOutpointIdxsLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBtcTxId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroEthAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroEthTxHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroOutpointTxId\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"btcTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"ethTxHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"outpointTxIds\",\"type\":\"bytes32[]\"},{\"indexed\":false,\"internalType\":\"uint16[]\",\"name\":\"outpointIdxs\",\"type\":\"uint16[]\"}],\"name\":\"RedeemPrepared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"RedeemRequested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bip340\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"btcTxId\",\"type\":\"bytes32\"}],\"name\":\"isMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"}],\"name\":\"isPrepared\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"btcTxId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"redeemRequestTxHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"outpointTxIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint16[]\",\"name\":\"outpointIdxs\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"rx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"redeemPrepare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"receiver\",\"type\":\"string\"}],\"name\":\"redeemRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "",
}

// TEENetBtcBridgeABI is the input ABI used to generate the binding from.
// Deprecated: Use TEENetBtcBridgeMetaData.ABI instead.
var TEENetBtcBridgeABI = TEENetBtcBridgeMetaData.ABI

// TEENetBtcBridgeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TEENetBtcBridgeMetaData.Bin instead.
var TEENetBtcBridgeBin = TEENetBtcBridgeMetaData.Bin

// DeployTEENetBtcBridge deploys a new Ethereum contract, binding an instance of TEENetBtcBridge to it.
func DeployTEENetBtcBridge(auth *bind.TransactOpts, backend bind.ContractBackend, pk_ *big.Int) (common.Address, *types.Transaction, *TEENetBtcBridge, error) {
	parsed, err := TEENetBtcBridgeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TEENetBtcBridgeBin), backend, pk_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TEENetBtcBridge{TEENetBtcBridgeCaller: TEENetBtcBridgeCaller{contract: contract}, TEENetBtcBridgeTransactor: TEENetBtcBridgeTransactor{contract: contract}, TEENetBtcBridgeFilterer: TEENetBtcBridgeFilterer{contract: contract}}, nil
}

// TEENetBtcBridge is an auto generated Go binding around an Ethereum contract.
type TEENetBtcBridge struct {
	TEENetBtcBridgeCaller     // Read-only binding to the contract
	TEENetBtcBridgeTransactor // Write-only binding to the contract
	TEENetBtcBridgeFilterer   // Log filterer for contract events
}

// TEENetBtcBridgeCaller is an auto generated read-only Go binding around an Ethereum contract.
type TEENetBtcBridgeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TEENetBtcBridgeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TEENetBtcBridgeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TEENetBtcBridgeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TEENetBtcBridgeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TEENetBtcBridgeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TEENetBtcBridgeSession struct {
	Contract     *TEENetBtcBridge  // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// TEENetBtcBridgeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TEENetBtcBridgeCallerSession struct {
	Contract *TEENetBtcBridgeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts          // Call options to use throughout this session
}

// TEENetBtcBridgeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TEENetBtcBridgeTransactorSession struct {
	Contract     *TEENetBtcBridgeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts          // Transaction auth options to use throughout this session
}

// TEENetBtcBridgeRaw is an auto generated low-level Go binding around an Ethereum contract.
type TEENetBtcBridgeRaw struct {
	Contract *TEENetBtcBridge // Generic contract binding to access the raw methods on
}

// TEENetBtcBridgeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TEENetBtcBridgeCallerRaw struct {
	Contract *TEENetBtcBridgeCaller // Generic read-only contract binding to access the raw methods on
}

// TEENetBtcBridgeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TEENetBtcBridgeTransactorRaw struct {
	Contract *TEENetBtcBridgeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTEENetBtcBridge creates a new instance of TEENetBtcBridge, bound to a specific deployed contract.
func NewTEENetBtcBridge(address common.Address, backend bind.ContractBackend) (*TEENetBtcBridge, error) {
	contract, err := bindTEENetBtcBridge(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TEENetBtcBridge{TEENetBtcBridgeCaller: TEENetBtcBridgeCaller{contract: contract}, TEENetBtcBridgeTransactor: TEENetBtcBridgeTransactor{contract: contract}, TEENetBtcBridgeFilterer: TEENetBtcBridgeFilterer{contract: contract}}, nil
}

// NewTEENetBtcBridgeCaller creates a new read-only instance of TEENetBtcBridge, bound to a specific deployed contract.
func NewTEENetBtcBridgeCaller(address common.Address, caller bind.ContractCaller) (*TEENetBtcBridgeCaller, error) {
	contract, err := bindTEENetBtcBridge(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TEENetBtcBridgeCaller{contract: contract}, nil
}

// NewTEENetBtcBridgeTransactor creates a new write-only instance of TEENetBtcBridge, bound to a specific deployed contract.
func NewTEENetBtcBridgeTransactor(address common.Address, transactor bind.ContractTransactor) (*TEENetBtcBridgeTransactor, error) {
	contract, err := bindTEENetBtcBridge(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TEENetBtcBridgeTransactor{contract: contract}, nil
}

// NewTEENetBtcBridgeFilterer creates a new log filterer instance of TEENetBtcBridge, bound to a specific deployed contract.
func NewTEENetBtcBridgeFilterer(address common.Address, filterer bind.ContractFilterer) (*TEENetBtcBridgeFilterer, error) {
	contract, err := bindTEENetBtcBridge(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TEENetBtcBridgeFilterer{contract: contract}, nil
}

// bindTEENetBtcBridge binds a generic wrapper to an already deployed contract.
func bindTEENetBtcBridge(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TEENetBtcBridgeMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TEENetBtcBridge *TEENetBtcBridgeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TEENetBtcBridge.Contract.TEENetBtcBridgeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TEENetBtcBridge *TEENetBtcBridgeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.TEENetBtcBridgeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TEENetBtcBridge *TEENetBtcBridgeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.TEENetBtcBridgeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TEENetBtcBridge *TEENetBtcBridgeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TEENetBtcBridge.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TEENetBtcBridge *TEENetBtcBridgeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TEENetBtcBridge *TEENetBtcBridgeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.contract.Transact(opts, method, params...)
}

// Bip340 is a free data retrieval call binding the contract method 0xfed4634d.
//
// Solidity: function bip340() view returns(address)
func (_TEENetBtcBridge *TEENetBtcBridgeCaller) Bip340(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TEENetBtcBridge.contract.Call(opts, &out, "bip340")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Bip340 is a free data retrieval call binding the contract method 0xfed4634d.
//
// Solidity: function bip340() view returns(address)
func (_TEENetBtcBridge *TEENetBtcBridgeSession) Bip340() (common.Address, error) {
	return _TEENetBtcBridge.Contract.Bip340(&_TEENetBtcBridge.CallOpts)
}

// Bip340 is a free data retrieval call binding the contract method 0xfed4634d.
//
// Solidity: function bip340() view returns(address)
func (_TEENetBtcBridge *TEENetBtcBridgeCallerSession) Bip340() (common.Address, error) {
	return _TEENetBtcBridge.Contract.Bip340(&_TEENetBtcBridge.CallOpts)
}

// IsMinted is a free data retrieval call binding the contract method 0x9e4c0be3.
//
// Solidity: function isMinted(bytes32 btcTxId) view returns(bool)
func (_TEENetBtcBridge *TEENetBtcBridgeCaller) IsMinted(opts *bind.CallOpts, btcTxId [32]byte) (bool, error) {
	var out []interface{}
	err := _TEENetBtcBridge.contract.Call(opts, &out, "isMinted", btcTxId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsMinted is a free data retrieval call binding the contract method 0x9e4c0be3.
//
// Solidity: function isMinted(bytes32 btcTxId) view returns(bool)
func (_TEENetBtcBridge *TEENetBtcBridgeSession) IsMinted(btcTxId [32]byte) (bool, error) {
	return _TEENetBtcBridge.Contract.IsMinted(&_TEENetBtcBridge.CallOpts, btcTxId)
}

// IsMinted is a free data retrieval call binding the contract method 0x9e4c0be3.
//
// Solidity: function isMinted(bytes32 btcTxId) view returns(bool)
func (_TEENetBtcBridge *TEENetBtcBridgeCallerSession) IsMinted(btcTxId [32]byte) (bool, error) {
	return _TEENetBtcBridge.Contract.IsMinted(&_TEENetBtcBridge.CallOpts, btcTxId)
}

// IsPrepared is a free data retrieval call binding the contract method 0x981c7cde.
//
// Solidity: function isPrepared(bytes32 txHash) view returns(bool)
func (_TEENetBtcBridge *TEENetBtcBridgeCaller) IsPrepared(opts *bind.CallOpts, txHash [32]byte) (bool, error) {
	var out []interface{}
	err := _TEENetBtcBridge.contract.Call(opts, &out, "isPrepared", txHash)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsPrepared is a free data retrieval call binding the contract method 0x981c7cde.
//
// Solidity: function isPrepared(bytes32 txHash) view returns(bool)
func (_TEENetBtcBridge *TEENetBtcBridgeSession) IsPrepared(txHash [32]byte) (bool, error) {
	return _TEENetBtcBridge.Contract.IsPrepared(&_TEENetBtcBridge.CallOpts, txHash)
}

// IsPrepared is a free data retrieval call binding the contract method 0x981c7cde.
//
// Solidity: function isPrepared(bytes32 txHash) view returns(bool)
func (_TEENetBtcBridge *TEENetBtcBridgeCallerSession) IsPrepared(txHash [32]byte) (bool, error) {
	return _TEENetBtcBridge.Contract.IsPrepared(&_TEENetBtcBridge.CallOpts, txHash)
}

// Pk is a free data retrieval call binding the contract method 0x58e14a45.
//
// Solidity: function pk() view returns(uint256)
func (_TEENetBtcBridge *TEENetBtcBridgeCaller) Pk(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _TEENetBtcBridge.contract.Call(opts, &out, "pk")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Pk is a free data retrieval call binding the contract method 0x58e14a45.
//
// Solidity: function pk() view returns(uint256)
func (_TEENetBtcBridge *TEENetBtcBridgeSession) Pk() (*big.Int, error) {
	return _TEENetBtcBridge.Contract.Pk(&_TEENetBtcBridge.CallOpts)
}

// Pk is a free data retrieval call binding the contract method 0x58e14a45.
//
// Solidity: function pk() view returns(uint256)
func (_TEENetBtcBridge *TEENetBtcBridgeCallerSession) Pk() (*big.Int, error) {
	return _TEENetBtcBridge.Contract.Pk(&_TEENetBtcBridge.CallOpts)
}

// Twbtc is a free data retrieval call binding the contract method 0xf2c668d3.
//
// Solidity: function twbtc() view returns(address)
func (_TEENetBtcBridge *TEENetBtcBridgeCaller) Twbtc(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TEENetBtcBridge.contract.Call(opts, &out, "twbtc")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Twbtc is a free data retrieval call binding the contract method 0xf2c668d3.
//
// Solidity: function twbtc() view returns(address)
func (_TEENetBtcBridge *TEENetBtcBridgeSession) Twbtc() (common.Address, error) {
	return _TEENetBtcBridge.Contract.Twbtc(&_TEENetBtcBridge.CallOpts)
}

// Twbtc is a free data retrieval call binding the contract method 0xf2c668d3.
//
// Solidity: function twbtc() view returns(address)
func (_TEENetBtcBridge *TEENetBtcBridgeCallerSession) Twbtc() (common.Address, error) {
	return _TEENetBtcBridge.Contract.Twbtc(&_TEENetBtcBridge.CallOpts)
}

// Mint is a paid mutator transaction binding the contract method 0x99ba77ed.
//
// Solidity: function mint(bytes32 btcTxId, address receiver, uint256 amount, uint256 rx, uint256 s) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeTransactor) Mint(opts *bind.TransactOpts, btcTxId [32]byte, receiver common.Address, amount *big.Int, rx *big.Int, s *big.Int) (*types.Transaction, error) {
	return _TEENetBtcBridge.contract.Transact(opts, "mint", btcTxId, receiver, amount, rx, s)
}

// Mint is a paid mutator transaction binding the contract method 0x99ba77ed.
//
// Solidity: function mint(bytes32 btcTxId, address receiver, uint256 amount, uint256 rx, uint256 s) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeSession) Mint(btcTxId [32]byte, receiver common.Address, amount *big.Int, rx *big.Int, s *big.Int) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.Mint(&_TEENetBtcBridge.TransactOpts, btcTxId, receiver, amount, rx, s)
}

// Mint is a paid mutator transaction binding the contract method 0x99ba77ed.
//
// Solidity: function mint(bytes32 btcTxId, address receiver, uint256 amount, uint256 rx, uint256 s) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeTransactorSession) Mint(btcTxId [32]byte, receiver common.Address, amount *big.Int, rx *big.Int, s *big.Int) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.Mint(&_TEENetBtcBridge.TransactOpts, btcTxId, receiver, amount, rx, s)
}

// RedeemPrepare is a paid mutator transaction binding the contract method 0x4c8eb2b4.
//
// Solidity: function redeemPrepare(bytes32 redeemRequestTxHash, address requester, string receiver, uint256 amount, bytes32[] outpointTxIds, uint16[] outpointIdxs, uint256 rx, uint256 s) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeTransactor) RedeemPrepare(opts *bind.TransactOpts, redeemRequestTxHash [32]byte, requester common.Address, receiver string, amount *big.Int, outpointTxIds [][32]byte, outpointIdxs []uint16, rx *big.Int, s *big.Int) (*types.Transaction, error) {
	return _TEENetBtcBridge.contract.Transact(opts, "redeemPrepare", redeemRequestTxHash, requester, receiver, amount, outpointTxIds, outpointIdxs, rx, s)
}

// RedeemPrepare is a paid mutator transaction binding the contract method 0x4c8eb2b4.
//
// Solidity: function redeemPrepare(bytes32 redeemRequestTxHash, address requester, string receiver, uint256 amount, bytes32[] outpointTxIds, uint16[] outpointIdxs, uint256 rx, uint256 s) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeSession) RedeemPrepare(redeemRequestTxHash [32]byte, requester common.Address, receiver string, amount *big.Int, outpointTxIds [][32]byte, outpointIdxs []uint16, rx *big.Int, s *big.Int) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.RedeemPrepare(&_TEENetBtcBridge.TransactOpts, redeemRequestTxHash, requester, receiver, amount, outpointTxIds, outpointIdxs, rx, s)
}

// RedeemPrepare is a paid mutator transaction binding the contract method 0x4c8eb2b4.
//
// Solidity: function redeemPrepare(bytes32 redeemRequestTxHash, address requester, string receiver, uint256 amount, bytes32[] outpointTxIds, uint16[] outpointIdxs, uint256 rx, uint256 s) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeTransactorSession) RedeemPrepare(redeemRequestTxHash [32]byte, requester common.Address, receiver string, amount *big.Int, outpointTxIds [][32]byte, outpointIdxs []uint16, rx *big.Int, s *big.Int) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.RedeemPrepare(&_TEENetBtcBridge.TransactOpts, redeemRequestTxHash, requester, receiver, amount, outpointTxIds, outpointIdxs, rx, s)
}

// RedeemRequest is a paid mutator transaction binding the contract method 0x879d4189.
//
// Solidity: function redeemRequest(uint256 amount, string receiver) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeTransactor) RedeemRequest(opts *bind.TransactOpts, amount *big.Int, receiver string) (*types.Transaction, error) {
	return _TEENetBtcBridge.contract.Transact(opts, "redeemRequest", amount, receiver)
}

// RedeemRequest is a paid mutator transaction binding the contract method 0x879d4189.
//
// Solidity: function redeemRequest(uint256 amount, string receiver) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeSession) RedeemRequest(amount *big.Int, receiver string) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.RedeemRequest(&_TEENetBtcBridge.TransactOpts, amount, receiver)
}

// RedeemRequest is a paid mutator transaction binding the contract method 0x879d4189.
//
// Solidity: function redeemRequest(uint256 amount, string receiver) returns()
func (_TEENetBtcBridge *TEENetBtcBridgeTransactorSession) RedeemRequest(amount *big.Int, receiver string) (*types.Transaction, error) {
	return _TEENetBtcBridge.Contract.RedeemRequest(&_TEENetBtcBridge.TransactOpts, amount, receiver)
}

// TEENetBtcBridgeMintedIterator is returned from FilterMinted and is used to iterate over the raw logs and unpacked data for Minted events raised by the TEENetBtcBridge contract.
type TEENetBtcBridgeMintedIterator struct {
	Event *TEENetBtcBridgeMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TEENetBtcBridgeMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TEENetBtcBridgeMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TEENetBtcBridgeMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TEENetBtcBridgeMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TEENetBtcBridgeMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TEENetBtcBridgeMinted represents a Minted event raised by the TEENetBtcBridge contract.
type TEENetBtcBridgeMinted struct {
	BtcTxId  [32]byte
	Receiver common.Address
	Amount   *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterMinted is a free log retrieval operation binding the contract event 0x1a49076e0e8c733171c5360d78c9ae8e19fef5a0720b926e72f78b7cc37618cd.
//
// Solidity: event Minted(bytes32 indexed btcTxId, address receiver, uint256 amount)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) FilterMinted(opts *bind.FilterOpts, btcTxId [][32]byte) (*TEENetBtcBridgeMintedIterator, error) {

	var btcTxIdRule []interface{}
	for _, btcTxIdItem := range btcTxId {
		btcTxIdRule = append(btcTxIdRule, btcTxIdItem)
	}

	logs, sub, err := _TEENetBtcBridge.contract.FilterLogs(opts, "Minted", btcTxIdRule)
	if err != nil {
		return nil, err
	}
	return &TEENetBtcBridgeMintedIterator{contract: _TEENetBtcBridge.contract, event: "Minted", logs: logs, sub: sub}, nil
}

// WatchMinted is a free log subscription operation binding the contract event 0x1a49076e0e8c733171c5360d78c9ae8e19fef5a0720b926e72f78b7cc37618cd.
//
// Solidity: event Minted(bytes32 indexed btcTxId, address receiver, uint256 amount)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) WatchMinted(opts *bind.WatchOpts, sink chan<- *TEENetBtcBridgeMinted, btcTxId [][32]byte) (event.Subscription, error) {

	var btcTxIdRule []interface{}
	for _, btcTxIdItem := range btcTxId {
		btcTxIdRule = append(btcTxIdRule, btcTxIdItem)
	}

	logs, sub, err := _TEENetBtcBridge.contract.WatchLogs(opts, "Minted", btcTxIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TEENetBtcBridgeMinted)
				if err := _TEENetBtcBridge.contract.UnpackLog(event, "Minted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinted is a log parse operation binding the contract event 0x1a49076e0e8c733171c5360d78c9ae8e19fef5a0720b926e72f78b7cc37618cd.
//
// Solidity: event Minted(bytes32 indexed btcTxId, address receiver, uint256 amount)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) ParseMinted(log types.Log) (*TEENetBtcBridgeMinted, error) {
	event := new(TEENetBtcBridgeMinted)
	if err := _TEENetBtcBridge.contract.UnpackLog(event, "Minted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TEENetBtcBridgeRedeemPreparedIterator is returned from FilterRedeemPrepared and is used to iterate over the raw logs and unpacked data for RedeemPrepared events raised by the TEENetBtcBridge contract.
type TEENetBtcBridgeRedeemPreparedIterator struct {
	Event *TEENetBtcBridgeRedeemPrepared // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TEENetBtcBridgeRedeemPreparedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TEENetBtcBridgeRedeemPrepared)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TEENetBtcBridgeRedeemPrepared)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TEENetBtcBridgeRedeemPreparedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TEENetBtcBridgeRedeemPreparedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TEENetBtcBridgeRedeemPrepared represents a RedeemPrepared event raised by the TEENetBtcBridge contract.
type TEENetBtcBridgeRedeemPrepared struct {
	EthTxHash     [32]byte
	Requester     common.Address
	Receiver      string
	Amount        *big.Int
	OutpointTxIds [][32]byte
	OutpointIdxs  []uint16
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterRedeemPrepared is a free log retrieval operation binding the contract event 0x37c97e6e1d3765bfb9944bdfbdb2b5c0557d15c37b8e59280de9501bdc637ed3.
//
// Solidity: event RedeemPrepared(bytes32 indexed ethTxHash, address requester, string receiver, uint256 amount, bytes32[] outpointTxIds, uint16[] outpointIdxs)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) FilterRedeemPrepared(opts *bind.FilterOpts, ethTxHash [][32]byte) (*TEENetBtcBridgeRedeemPreparedIterator, error) {

	var ethTxHashRule []interface{}
	for _, ethTxHashItem := range ethTxHash {
		ethTxHashRule = append(ethTxHashRule, ethTxHashItem)
	}

	logs, sub, err := _TEENetBtcBridge.contract.FilterLogs(opts, "RedeemPrepared", ethTxHashRule)
	if err != nil {
		return nil, err
	}
	return &TEENetBtcBridgeRedeemPreparedIterator{contract: _TEENetBtcBridge.contract, event: "RedeemPrepared", logs: logs, sub: sub}, nil
}

// WatchRedeemPrepared is a free log subscription operation binding the contract event 0x37c97e6e1d3765bfb9944bdfbdb2b5c0557d15c37b8e59280de9501bdc637ed3.
//
// Solidity: event RedeemPrepared(bytes32 indexed ethTxHash, address requester, string receiver, uint256 amount, bytes32[] outpointTxIds, uint16[] outpointIdxs)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) WatchRedeemPrepared(opts *bind.WatchOpts, sink chan<- *TEENetBtcBridgeRedeemPrepared, ethTxHash [][32]byte) (event.Subscription, error) {

	var ethTxHashRule []interface{}
	for _, ethTxHashItem := range ethTxHash {
		ethTxHashRule = append(ethTxHashRule, ethTxHashItem)
	}

	logs, sub, err := _TEENetBtcBridge.contract.WatchLogs(opts, "RedeemPrepared", ethTxHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TEENetBtcBridgeRedeemPrepared)
				if err := _TEENetBtcBridge.contract.UnpackLog(event, "RedeemPrepared", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemPrepared is a log parse operation binding the contract event 0x37c97e6e1d3765bfb9944bdfbdb2b5c0557d15c37b8e59280de9501bdc637ed3.
//
// Solidity: event RedeemPrepared(bytes32 indexed ethTxHash, address requester, string receiver, uint256 amount, bytes32[] outpointTxIds, uint16[] outpointIdxs)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) ParseRedeemPrepared(log types.Log) (*TEENetBtcBridgeRedeemPrepared, error) {
	event := new(TEENetBtcBridgeRedeemPrepared)
	if err := _TEENetBtcBridge.contract.UnpackLog(event, "RedeemPrepared", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TEENetBtcBridgeRedeemRequestedIterator is returned from FilterRedeemRequested and is used to iterate over the raw logs and unpacked data for RedeemRequested events raised by the TEENetBtcBridge contract.
type TEENetBtcBridgeRedeemRequestedIterator struct {
	Event *TEENetBtcBridgeRedeemRequested // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TEENetBtcBridgeRedeemRequestedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TEENetBtcBridgeRedeemRequested)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TEENetBtcBridgeRedeemRequested)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TEENetBtcBridgeRedeemRequestedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TEENetBtcBridgeRedeemRequestedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TEENetBtcBridgeRedeemRequested represents a RedeemRequested event raised by the TEENetBtcBridge contract.
type TEENetBtcBridgeRedeemRequested struct {
	Sender   common.Address
	Amount   *big.Int
	Receiver string
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterRedeemRequested is a free log retrieval operation binding the contract event 0x855269a3c942964e56de35012138cbde5a827c4c5b9d5686d96c342ece95c104.
//
// Solidity: event RedeemRequested(address sender, uint256 amount, string receiver)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) FilterRedeemRequested(opts *bind.FilterOpts) (*TEENetBtcBridgeRedeemRequestedIterator, error) {

	logs, sub, err := _TEENetBtcBridge.contract.FilterLogs(opts, "RedeemRequested")
	if err != nil {
		return nil, err
	}
	return &TEENetBtcBridgeRedeemRequestedIterator{contract: _TEENetBtcBridge.contract, event: "RedeemRequested", logs: logs, sub: sub}, nil
}

// WatchRedeemRequested is a free log subscription operation binding the contract event 0x855269a3c942964e56de35012138cbde5a827c4c5b9d5686d96c342ece95c104.
//
// Solidity: event RedeemRequested(address sender, uint256 amount, string receiver)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) WatchRedeemRequested(opts *bind.WatchOpts, sink chan<- *TEENetBtcBridgeRedeemRequested) (event.Subscription, error) {

	logs, sub, err := _TEENetBtcBridge.contract.WatchLogs(opts, "RedeemRequested")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TEENetBtcBridgeRedeemRequested)
				if err := _TEENetBtcBridge.contract.UnpackLog(event, "RedeemRequested", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRedeemRequested is a log parse operation binding the contract event 0x855269a3c942964e56de35012138cbde5a827c4c5b9d5686d96c342ece95c104.
//
// Solidity: event RedeemRequested(address sender, uint256 amount, string receiver)
func (_TEENetBtcBridge *TEENetBtcBridgeFilterer) ParseRedeemRequested(log types.Log) (*TEENetBtcBridgeRedeemRequested, error) {
	event := new(TEENetBtcBridgeRedeemRequested)
	if err := _TEENetBtcBridge.contract.UnpackLog(event, "RedeemRequested", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
